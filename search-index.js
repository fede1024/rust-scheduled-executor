var searchIndex = {};
searchIndex["scheduled_executor"] = {"doc":"The library","items":[[0,"executor","scheduled_executor","Executors allow easy scheduling and execution of functions or closures. The `CoreExecutor` uses a single thread for scheduling and execution, while the `ThreadPoolExecutor` uses multiple threads to execute the function. Internally, each executor uses a `tokio_core::reactor::Core` as event loop, that will drive the scheduling of the functions (and for the `CoreExecutor`, also their execution). A reference to the event loop is passed to every function when executed, allowing it to register additional events if needed.",null,null],[3,"CoreExecutor","scheduled_executor::executor","A `CoreExecutor` is the most simple executor provided. It runs a single thread, which is responsible for both scheduling the function (registering the timer for the wakeup), and the actual execution. The executor will stop once dropped. The `CoreExecutor` can be cloned to generate a new reference to the same underlying executor. Given the single threaded nature of this executor, tasks are executed sequentially, and a long running task will cause delay in other subsequent executions.",null,null],[3,"ThreadPoolExecutor","","A `ThreadPoolExecutor` will use one thread for the task scheduling and a thread pool for task execution, allowing multiple tasks to run in parallel.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","Creates a new `CoreExecutor`.",0,{"inputs":[],"output":{"name":"result"}}],[11,"with_name","","Creates a new `CoreExecutor` with the specified thread name.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"schedule_fixed_interval","","Schedule a function for running at fixed intervals. The executor will try to run the function every `interval`, but if one execution takes longer than `interval` it will delay all the subsequent calls.",0,{"inputs":[{"name":"self"},{"name":"duration"},{"name":"duration"},{"name":"f"}],"output":null}],[11,"schedule_fixed_rate","","Schedule a function for running at fixed rate. The executor will try to run the function every `interval`, and if a task execution takes longer than `interval`, the wait time between task will be reduced to decrease the overall delay.",0,{"inputs":[{"name":"self"},{"name":"duration"},{"name":"duration"},{"name":"f"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"threadpoolexecutor"}}],[11,"new","","Creates a new `ThreadPoolExecutor` with the specified number of threads. Threads will be named \"pool_thread_0\", \"pool_thread_1\" and so on.",1,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"with_prefix","","Creates a new `ThreadPoolExecutor` with the specified number of threads and prefix for the thread names.",1,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"with_executor","","Creates a new `ThreadPoolExecutor` with the specified number of threads, prefix and using the given `CoreExecutor` for scheduling.",1,{"inputs":[{"name":"usize"},{"name":"str"},{"name":"coreexecutor"}],"output":{"name":"threadpoolexecutor"}}],[11,"schedule_fixed_rate","","Schedules the given function to be executed every `interval`. The function will be scheduled on one of the threads in the thread pool.",1,{"inputs":[{"name":"self"},{"name":"duration"},{"name":"duration"},{"name":"f"}],"output":null}],[11,"pool","","Returns the thread pool used internally.",1,{"inputs":[{"name":"self"}],"output":{"name":"cpupool"}}],[0,"task_group","scheduled_executor","Task groups can be used whenever there is a sequence of tasks that need to be executed at regular intervals, and the sequence can change across different cycles.",null,null],[8,"TaskGroup","scheduled_executor::task_group","Defines a group of tasks. Task groups allow you to schedule the execution of different tasks uniformly in a specific interval. The task discovery will be performed by `get_tasks` that will return a list of task ids. The returned task ids will be used by the `execute` function to run the specified task. `get_tasks` will be executed one per interval, while `execute` will be executed every `interval` / number of tasks. See also: example in the module documentation.",null,null],[16,"TaskId","","",2,null],[10,"get_tasks","","Runs at the beginning of each cycle and generates the list of task ids.",2,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"execute","","Runs once per task id per cycle.",2,null],[8,"TaskGroupScheduler","","Allows the execution of a `TaskGroup`.",null,null],[10,"schedule","","",3,{"inputs":[{"name":"self"},{"name":"t"},{"name":"duration"},{"name":"duration"}],"output":{"name":"arc"}}],[11,"schedule","scheduled_executor::executor","",0,{"inputs":[{"name":"self"},{"name":"t"},{"name":"duration"},{"name":"duration"}],"output":{"name":"arc"}}],[11,"schedule","","",1,{"inputs":[{"name":"self"},{"name":"t"},{"name":"duration"},{"name":"duration"}],"output":{"name":"arc"}}]],"paths":[[3,"CoreExecutor"],[3,"ThreadPoolExecutor"],[8,"TaskGroup"],[8,"TaskGroupScheduler"]]};
initSearch(searchIndex);
